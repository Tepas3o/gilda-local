blueprint:
  name: Gilda Deferred Plug Request Automation
  description: Determines the optimal time to turn on a smart plug
  domain: automation
  author: SebastiÃ¡n Terrazas

  input:
    deferred_load_section:
      name: Deferred Load Section
      description: Deferred Load Parameters
      input:
        load:
          name: Intensity
          description: Deferred intensity [W]
          default: 1000.0
          selector:
            number:
              min: 0
              max: 10000
              step: 10
              unit_of_measurement: "W"

        on_duration:
          name: On Duration
          description: Duration the plug should stay on once activated
          default:
            hours: 1
          selector:
            duration:

        time_horizon:
          name: Time Horizon
          description: Time Horizon to turn-on the deferred load
          default:
            hours: 24
          selector:
            duration:

        sample_frequency:
          name: Sample Frequency
          description: Sample Frequency to program the deferred load
          default:
            minutes: 15
          selector:
            duration:

        co2_cost:
          name: CO2 Cost
          description: CO2 Cost [$/Kg CO2]
          default: 10.0
          selector:
            number:
              min: 0
              max: 100
              step: 0.1
              unit_of_measurement: "$ / Kg"

        kwh_cost:
          name: KWH Cost
          description: KWH Cost [$/KWH]
          default: 150.0
          selector:
            number:
              min: 0
              max: 1000
              step: 1
              unit_of_measurement: "$ / KWH"

        co2_intensity_entity:
          name: CO2 Intensity Sensor
          selector:
            entity:
              filter:
                - domain: sensor

    timer_entity_section:
      name: Timer Entity
      description: Timer to defer the load starting
      input:
        timer_entity:
          name: Deferred Timer
          description: This timer is used to trigger the deferred start
          selector:
            entity:
              filter:
                - domain: timer

    entity_sensors_section:
      name: Entity Sensors
      description: Allow to monitor and control the entity
      input:
        trigger_input_boolean:
          name: Deferred Start Switch
          description: This switch detects a deferred start request
          selector:
            entity:
              filter:
                - domain: input_boolean

        start_button:
          name: Deferred Start Button
          description: This button actually start the deferred load
          selector:
            entity:
              filter:
                - domain:
                    - switch
                    - button

    gilda_section:
      name: Gilda Section
      description: Gilda connection parameters
      input:
        gilda_host:
          name: Gilda Host
          default: homeassistant.local
        gilda_local_port:
          name: Gilda Local Port
          default: 5024
          selector:
            number:
              min: 1
              max: 65535
              unit_of_measurement: "port"
              mode: box
        gilda_opts_port:
          name: Gilda Opts Port
          default: 5012
          selector:
            number:
              min: 1
              max: 65535
              unit_of_measurement: "port"
              mode: box

    sql_section:
      name: SQL Section
      description: SQL database connection parameters
      input:
        sql_user:
          name: SQL User
          default: homeassistant
        sql_password:
          name: SQL Password
          default: gilda
        sql_host:
          name: SQL Host
          default: homeassistant.local
        sql_database:
          name: SQL database
          default: homeassistant
        sql_port:
          name: SQL port
          default: 3306
          selector:
            number:
              min: 1
              max: 65535
              unit_of_measurement: "port"
              mode: box

variables:
  load: !input load
  co2_cost: !input co2_cost
  kwh_cost: !input kwh_cost

trigger_variables:
  th: !input time_horizon
  time_horizon: "{{ (th.hours if 'hours' in th.keys() else '0') ~ ':' ~ ('%02d' | format(th.minutes if 'minutes' in th.keys() else 0)) ~ ':' ~ ('%02d' | format(th.seconds if 'seconds' in th.keys() else 0)) }}"
  od: !input on_duration
  on_duration: "{{ (od.hours if 'hours' in od.keys() else '0') ~ ':' ~ ('%02d' | format(od.minutes if 'minutes' in od.keys() else 0)) ~ ':' ~ ('%02d' | format(od.seconds if 'seconds' in od.keys() else 0)) }}"
  sf: !input sample_frequency
  sample_frequency: "{{ (sf.hours if 'hours' in sf.keys() else '0') ~ ':' ~ ('%02d' | format(sf.minutes if 'minutes' in sf.keys() else 0)) ~ ':'  ~ ('%02d' | format(sf.seconds if 'seconds' in sf.keys() else 0)) }}"
  start_button: !input start_button

trigger:
  - trigger: state
    entity_id:
      - !input trigger_input_boolean
    to: "on"
    id: deferred_start

  - trigger: state
    entity_id:
      - !input trigger_input_boolean
    to: "off"
    id: stop_timer

  - trigger: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_entity
    id: timer_finished

action:
  - choose:
      # Action when trigger_input_boolean is turned on
      - conditions:
          - condition: trigger
            id: deferred_start
        sequence:
          - action: "pyscript.gilda_deferred_load_request"
            data:
              load: "{{ load | float / 1000.0}}"
              on_period: "{{ on_duration }}"
              time_horizon: "{{ time_horizon }}"
              sample_frequency: "{{ sample_frequency }}"
              co2_cost: "{{ co2_cost | float }}"
              kwh_cost: "{{ kwh_cost | float }}"
              co2_intensity_entity: !input co2_intensity_entity

              timer_entity: !input timer_entity

              gilda_host: !input gilda_host
              gilda_opts_port: !input gilda_opts_port
              gilda_local_port: !input gilda_local_port

              sql_user: !input sql_user
              sql_password: !input sql_password
              sql_host: !input sql_host
              sql_database: !input sql_database
              sql_port: !input sql_port

      # Action when trigger_input_boolean is turned off
      - conditions:
          - condition: trigger
            id: stop_timer
        sequence:
          - action: timer.cancel
            target:
              entity_id: !input timer_entity

      # Condition for the timer_finished trigger
      - conditions:
          - condition: trigger
            id: timer_finished
        sequence:
          # Choose the correct action based on the entity's domain
          - choose:
              # If the entity is a button, press it
              - conditions:
                  - condition: template
                    value_template: >
                      {{ '.' in (start_button) and start_button.split('.')[0] == 'button' }}
                sequence:
                  - action: button.press
                    target:
                      entity_id: !input start_button
              # If the entity is a switch, turn it on
              - conditions:
                  - condition: template
                    value_template: >
                      {{ '.' in (start_button) and start_button.split('.')[0] == 'switch' }}
                sequence:
                  - action: switch.turn_on
                    target:
                      entity_id: !input start_button
          # Add a delay before turning off the entity
          - delay: "{{ on_duration }}"
          - choose:
              # If the entity is a button, press it again (or turn off)
              - conditions:
                  - condition: template
                    value_template: >
                      {{ '.' in (start_button) and start_button.split('.')[0] == 'button' }}
                sequence:
                  - action: button.press
                    target:
                      entity_id: !input start_button
              # If the entity is a switch, turn it off
              - conditions:
                  - condition: template
                    value_template: >
                      {{ '.' in (start_button) and start_button.split('.')[0] == 'switch' }}
                sequence:
                  - action: switch.turn_off
                    target:
                      entity_id: !input start_button
          # Add an action to turn off the trigger_input_boolean after the switch is turned off
          - action: input_boolean.turn_off
            target:
              entity_id: !input trigger_input_boolean

mode: single
